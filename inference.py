import pickle
import torch
from tqdm import tqdm
from tokenlizer import Tokenizer
from config import Config, FTConfig
from optical_model import OpticalModel

if torch.cuda.is_available():
    DEVICE = torch.device("cuda")
elif torch.backends.mps.is_available():
    DEVICE = torch.device("mps")
else:
    DEVICE = torch.device("cpu")


class Inference:
    def __init__(self, model_path,config):
        self.tokenizer = Tokenizer()
        self.device = DEVICE
        self.model = OpticalModel.load_from_checkpoint(model_path,config = config).to(self.device)
        self.model.freeze()
        self.model = self.model.model

    def predict(self, type, wave):
        type,wave = self.preprocess(type, wave)
        preds = []
        for i in tqdm(range(0, len(type), 500)):
            preds_part = self.model.predict(type[i:i+500].to(self.device),wave[i:i+500].to(self.device))
            preds = preds + preds_part.tolist()
        pred_data = []
        for i in preds:
            decoded = self.tokenizer.decode(i)
            decoded_str = "".join([str(i) for i in decoded])
            pred_data.append(decoded_str)
        return pred_data

    def preprocess(self, type, wave):
        batch_size = len(type)
        max_wave_length = 500
        type_encoded = [self.tokenizer.encode(i) for i in type]
        max_type_length = max(len(i) for i in type_encoded)

            
        type_batch_indices = torch.zeros((batch_size, max_type_length), dtype=torch.long)
        wave_batch_indices = torch.zeros((batch_size, max_wave_length), dtype=torch.float)

        for i in range(batch_size):
            input_word_indices = type_encoded[i]
            wave_indices = wave[i]
            type_batch_indices[i, :len(input_word_indices)] = torch.tensor(input_word_indices, dtype=torch.long)
            wave_batch_indices[i, :len(wave_indices)] = torch.tensor(wave_indices, dtype=torch.float)
        
        return type_batch_indices, wave_batch_indices


if __name__ == '__main__':
    model_path = r"data/model.ckpt"
    config = FTConfig()
    config.trainer_cfg = config.finetune_cfg
    inference = Inference(model_path,config)
    data = pickle.load(open(r"/Users/kieron/codes/Optical_GPT_APP/data/simulation_data.pkl","rb"))
    batch_data = (data["test"]["type"][0],data["test"]["wave"][0])
    type = ["double_rec"]
    wave = [[0.0682063,0.06869816,0.06918436,0.06969958,0.07021266,0.07087527
,0.07161291,0.07251929,0.0735294,0.07476832,0.07612443,0.07761125
,0.07922075,0.08087889,0.08253685,0.08411121,0.08564573,0.08689696
,0.08793517,0.08876287,0.08942418,0.0898735,0.09027836,0.09053602
,0.0908332,0.09110618,0.09141891,0.09171125,0.09205862,0.09227923
,0.09247179,0.09248627,0.09234078,0.09196339,0.09139227,0.09050547
,0.08946084,0.0881253,0.08664651,0.08495312,0.08311324,0.08107604
,0.07891056,0.07650227,0.0739987,0.07120702,0.06832168,0.06524736
,0.06208033,0.05885191,0.05561436,0.0524502,0.04941655,0.04657694
,0.04400048,0.04172858,0.03980011,0.03841133,0.03721375,0.03633738
,0.03579187,0.03555032,0.03560425,0.03596077,0.03657527,0.03735649
,0.03835919,0.03937828,0.04055347,0.04165677,0.04280376,0.04389064
,0.04488709,0.04589314,0.04671322,0.04758686,0.04828552,0.04899857
,0.04965083,0.05022735,0.05088616,0.05154259,0.05242495,0.05335689
,0.05417279,0.05499003,0.05550534,0.05527102,0.0545193,0.05367327
,0.05259917,0.04925464,0.04584951,0.04437393,0.04330883,0.04266495
,0.04248206,0.04241991,0.04224124,0.04196075,0.04149779,0.0412289
,0.04101853,0.04097637,0.04110272,0.04133133,0.04168103,0.04212461
,0.0425697,0.04308482,0.04354978,0.04402091,0.04450026,0.04499206
,0.04553881,0.04618448,0.04690971,0.04785262,0.04891612,0.05013728
,0.05148853,0.05292761,0.05442568,0.05596009,0.05739813,0.0587597
,0.05998806,0.06104195,0.06195041,0.0626499,0.06320301,0.06365031
,0.06400399,0.06425113,0.06446713,0.06462216,0.0647552,0.06487952
,0.06498798,0.06507447,0.06516744,0.06524416,0.06529851,0.06535993
,0.06538341,0.06539552,0.06539706,0.06538314,0.06534777,0.06531878
,0.06528755,0.06524814,0.06522152,0.06516737,0.0650714,0.06491628
,0.06460213,0.06408584,0.06335807,0.06240018,0.06110381,0.05966746
,0.05817171,0.05668549,0.05549821,0.05459163,0.05398763,0.05381329
,0.05404318,0.05452425,0.05523391,0.05626635,0.05741511,0.0586782
,0.06010135,0.06155791,0.06303374,0.06452735,0.06595668,0.06724558
,0.06841326,0.06952615,0.07016316,0.07053926,0.07082264,0.07130945
,0.07177365,0.07204396,0.07300207,0.07408864,0.07516442,0.07575325
,0.07623378,0.07664837,0.07653665,0.07641372,0.07635753,0.07611518
,0.07580155,0.07540819,0.07510823,0.074784,0.07438502,0.07420937
,0.07406543,0.07386335,0.07377443,0.073726,0.07366335,0.07357306
,0.07346892,0.07344457,0.07333077,0.07311667,0.07297881,0.07278096
,0.07242344,0.07200858,0.07154985,0.07092118,0.07014042,0.06920598
,0.0681581,0.06700736,0.06560404,0.06418321,0.06275199,0.06125975
,0.05981615,0.05846667,0.05733524,0.05631013,0.05557628,0.05501999
,0.05477772,0.05478056,0.05489639,0.05542382,0.05605468,0.05691566
,0.0579231,0.05902378,0.06038766,0.0618096,0.0633612,0.065004
,0.06675117,0.06860151,0.07048884,0.07228939,0.07408407,0.075862
,0.0774224,0.07875999,0.07984882,0.08084626,0.0813224,0.08161481
,0.08116795,0.08059084,0.07981065,0.07702507,0.07286371,0.06699437
,0.06066545,0.05873944,0.05737926,0.05852427,0.05924837,0.05907365
,0.05872585,0.0581897,0.05819236,0.05851306,0.05877399,0.0590172
,0.05890413,0.05875039,0.05849956,0.05821516,0.05772881,0.05726651
,0.05687727,0.05648268,0.05607791,0.05571903,0.05542091,0.05516988
,0.05496449,0.05479271,0.05464574,0.0545999,0.05461236,0.05464121
,0.05467767,0.05485411,0.05508439,0.05533218,0.05558574,0.05597792
,0.05641119,0.05689139,0.05738469,0.05796637,0.05857287,0.05927485
,0.06000521,0.06076164,0.06152671,0.06244077,0.06341269,0.06441432
,0.06542998,0.06664749,0.06798432,0.06942662,0.07094967,0.07267903
,0.0746195,0.07670616,0.07900128,0.08141597,0.08408602,0.08684883
,0.08995163,0.09306637,0.09628877,0.09951118,0.10304822,0.10659361
,0.10992265,0.1132096,0.11657538,0.11997675,0.12321752,0.12631561
,0.12940286,0.13247086,0.13556118,0.13875437,0.14194756,0.14485255
,0.14775321,0.15111767,0.15461233,0.15775634,0.16062928,0.16372228
,0.16725022,0.17072844,0.17374211,0.17675578,0.17975729,0.18275657
,0.18614081,0.18980296,0.19303785,0.19530061,0.19764888,0.20482592
,0.21200297,0.21571237,0.21805315,0.21636342,0.20876195,0.20142343
,0.19710657,0.19278972,0.18814281,0.18338127,0.17871883,0.17421013
,0.16977396,0.16775081,0.16572765,0.16286034,0.15954383,0.15664876
,0.15493021,0.15321165,0.1512532,0.14925643,0.14737105,0.14562408
,0.1438846,0.14254791,0.14121123,0.13965171,0.13792794,0.13628636
,0.13524427,0.13420219,0.13286767,0.13137604,0.12995964,0.1289158
,0.12787195,0.12668908,0.1254379,0.124183,0.12290851,0.12163403
,0.12038465,0.11914975,0.11787785,0.11625624,0.11463463,0.11307448
,0.11156627,0.11005805,0.10811584,0.10616179,0.10422184,0.10230384
,0.10038585,0.09827987,0.09612508,0.09395997,0.09174839,0.08953681
,0.08734305,0.0851637,0.08298435,0.08074007,0.07848945,0.07628611
,0.07422184,0.07215757,0.07008803,0.06801469,0.06594135,0.0640084
,0.06209247,0.06017807,0.05827037,0.05636266,0.05463143,0.05310097
,0.0515705,0.05008973,0.04862715,0.04716457,0.04567925,0.04419347
,0.04280146,0.04176096,0.04072045,0.03973493,0.03882342,0.03791191
,0.03706425,0.03625481,0.03544536,0.03472464,0.03402507,0.0333255
,0.03268419,0.03204448,0.03141178,0.03082981,0.03024784,0.02969144
,0.0292104,0.02872937,0.02826378,0.02782473,0.02738567,0.02697815
,0.0266071,0.02623606,0.02588628,0.02555438,0.02522247,0.0249104
,0.02461131,0.02431222,0.02404621,0.0237981,0.02354999,0.02330409
,0.02305927,0.02281444,0.02260885,0.02242166,0.02223446,0.02203789
,0.02183671,0.02163554,0.0214662,0.02131473,0.02116327,0.02100433
,0.02084022,0.02067612,0.02052619,0.02038907,0.02025194,0.02011734
,0.01998596,0.01985458]]
    preds = inference.predict(type, wave)
    print(preds)